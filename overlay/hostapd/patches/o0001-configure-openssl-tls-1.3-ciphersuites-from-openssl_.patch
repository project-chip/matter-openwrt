From eaeaaf35c52740d072689de99f0c2305b846623e Mon Sep 17 00:00:00 2001
From: Karsten Sperling <ksperling@apple.com>
Date: Tue, 21 Mar 2023 23:15:53 +1300
Subject: [PATCH] Configure OpenSSL TLS 1.3 ciphersuites from openssl_ciphers

OpenSSL has separated out TLS 1.3 ciphersuites from ciphers for TLS
versions <=1.2, whereas other implementations (e.g. WolfSSL, BoringSSL)
use a single parameter. This change adds support for configuring TLS1.3
ciphersuites in OpenSSL in the same way as those other implementations.

This is done by separating the combined list into TLS 1.3 ciphersuites
(they all start with "TLS_"), and legacy (pre-1.3) ciphers. If the list
contains no TLS 1.3 ciphersuites, the default suites are left untouched
(matching current / desired behavior). If the list contains no legacy
ciphers then that list is explicitly cleared. This allows for TLS
1.3-only configurations.

---

Copyright (c) 2023 Project CHIP Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
---
 src/crypto/tls_openssl.c | 114 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 108 insertions(+), 6 deletions(-)

diff --git a/src/crypto/tls_openssl.c b/src/crypto/tls_openssl.c
index c9e00b3af..34df7a087 100644
--- a/src/crypto/tls_openssl.c
+++ b/src/crypto/tls_openssl.c
@@ -111,6 +111,108 @@ static size_t SSL_SESSION_get_master_key(const SSL_SESSION *session,
 
 #endif
 
+
+#if (OPENSSL_VERSION_NUMBER >= 0x10101000L) && !defined(OPENSSL_IS_BORINGSSL)
+/*
+ * OpenSSL has separated out TLS 1.3 ciphersuites from ciphers for TLS versions
+ * <=1.2, whereas other implementations (e.g. WolfSSL) use a single parameter.
+ *
+ * Provide a shim that separates the combined list into TLS 1.3 ciphersuites
+ * (they all start with "TLS_"), and pre-1.3 ciphers. If the list contains no
+ * TLS 1.3 ciphersuites, the default suites are left untouched (matching
+ * current / desired behavior), but if there are no pre-1.3 ciphers that list
+ * is explicitly cleared. This allows for TLS 1.3-only configurations.
+ */
+static int _set_cipher_list_and_suites(void *ssl, char const *combined,
+				       int (*set_cipher_list)(void *, char const *),
+				       int (*set_ciphersuites)(void *, char const *))
+{
+	int success = 1;
+	char *ciphers = NULL, *ciphers_end;
+	char *suites = NULL, *suites_end;
+	int len = os_strlen(combined);
+	char const *combined_end = combined + len;
+
+	ciphers = os_malloc(len);
+	suites = os_malloc(len);
+	if (!ciphers || !suites) {
+		success = 0;
+		goto done;
+	}
+
+	ciphers_end = ciphers;
+	suites_end = suites;
+	while (combined < combined_end) {
+		char const *sep = os_strchr(combined, ':');
+		len = (sep ? sep : combined_end) - combined;
+		if (os_strncmp(combined, "TLS_", 4) == 0) {
+			os_memcpy(suites_end, combined, len);
+			suites_end += len;
+			*suites_end++ = ':';
+		} else {
+			os_memcpy(ciphers_end, combined, len);
+			ciphers_end += len;
+			*ciphers_end++ = ':';
+		}
+		combined += len + 1;
+	}
+
+	if (ciphers_end > ciphers) {
+		*--ciphers_end = '\0';
+		wpa_printf(MSG_DEBUG,
+			   "OpenSSL: setting cipher_list '%s'",
+			   ciphers);
+		success = set_cipher_list(ssl, ciphers);
+	} else {
+		wpa_printf(MSG_DEBUG, "OpenSSL: clearing cipher_list");
+		if (!set_cipher_list(ssl, "")) {
+			unsigned long err = ERR_peek_error();
+			if (ERR_GET_LIB(err) == ERR_LIB_SSL && ERR_GET_REASON(err) == SSL_R_NO_CIPHER_MATCH) {
+				ERR_get_error(); /* consume the error */
+			} else {
+				success = 0;
+				goto done;
+			}
+		}
+	}
+
+	if (success && suites_end > suites) {
+		*--suites_end = '\0';
+		wpa_printf(MSG_DEBUG,
+			   "OpenSSL: setting ciphersuites '%s'",
+			   suites);
+		success = set_ciphersuites(ssl, suites);
+	}
+
+done:
+	os_free(ciphers);
+	os_free(suites);
+	return success;
+}
+
+static inline int SSL_CTX_set_cipher_list_and_ciphersuites(SSL_CTX *ctx,
+							   const char *combined)
+{
+	return _set_cipher_list_and_suites(ctx, combined,
+					   (int (*)(void *, char const *))SSL_CTX_set_cipher_list,
+					   (int (*)(void *, char const *))SSL_CTX_set_ciphersuites);
+}
+
+static inline int SSL_set_cipher_list_and_ciphersuites(SSL *ssl,
+						       const char *combined)
+{
+	return _set_cipher_list_and_suites(ssl, combined,
+					   (int (*)(void *, char const *))SSL_set_cipher_list,
+					   (int (*)(void *, char const *))SSL_set_ciphersuites);
+}
+#else /* >= 1.1.1 and !OPENSSL_IS_BORINGSSL */
+#define SSL_CTX_set_cipher_list_and_ciphersuites(ctx, ciphers) \
+	SSL_CTX_set_cipher_list(ctx, ciphers)
+#define SSL_set_cipher_list_and_ciphersuites(ssl, ciphers) \
+	SSL_set_cipher_list(ssl, ciphers)
+#endif /* >= 1.1.1 and !OPENSSL_IS_BORINGSSL */
+
+
 #if OPENSSL_VERSION_NUMBER < 0x10100000L || \
 	(defined(LIBRESSL_VERSION_NUMBER) && \
 	 LIBRESSL_VERSION_NUMBER < 0x20700000L)
@@ -1104,7 +1206,7 @@ void * tls_init(const struct tls_config *conf)
 		ciphers = conf->openssl_ciphers;
 	else
 		ciphers = TLS_DEFAULT_CIPHERS;
-	if (SSL_CTX_set_cipher_list(ssl, ciphers) != 1) {
+	if (SSL_CTX_set_cipher_list_and_ciphersuites(ssl, ciphers) != 1) {
 		wpa_printf(MSG_ERROR,
 			   "OpenSSL: Failed to set cipher string '%s'",
 			   ciphers);
@@ -3075,7 +3177,7 @@ static int tls_set_conn_flags(struct tls_connection *conn, unsigned int flags,
 				   openssl_ciphers);
 			ciphers = openssl_ciphers;
 		}
-		if (SSL_set_cipher_list(ssl, ciphers) != 1) {
+		if (SSL_set_cipher_list_and_ciphersuites(ssl, ciphers) != 1) {
 			wpa_printf(MSG_INFO,
 				   "OpenSSL: Failed to set Suite B ciphers");
 			return -1;
@@ -3147,7 +3249,7 @@ static int tls_set_conn_flags(struct tls_connection *conn, unsigned int flags,
 	}
 #else /* OPENSSL_IS_BORINGSSL */
 	if (!(flags & (TLS_CONN_SUITEB | TLS_CONN_SUITEB_NO_ECDH)) &&
-	    openssl_ciphers && SSL_set_cipher_list(ssl, openssl_ciphers) != 1) {
+	    openssl_ciphers && SSL_set_cipher_list_and_ciphersuites(ssl, openssl_ciphers) != 1) {
 		wpa_printf(MSG_INFO,
 			   "OpenSSL: Failed to set openssl_ciphers '%s'",
 			   openssl_ciphers);
@@ -3155,7 +3257,7 @@ static int tls_set_conn_flags(struct tls_connection *conn, unsigned int flags,
 	}
 #endif /* OPENSSL_IS_BORINGSSL */
 #else /* CONFIG_SUITEB */
-	if (openssl_ciphers && SSL_set_cipher_list(ssl, openssl_ciphers) != 1) {
+	if (openssl_ciphers && SSL_set_cipher_list_and_ciphersuites(ssl, openssl_ciphers) != 1) {
 		wpa_printf(MSG_INFO,
 			   "OpenSSL: Failed to set openssl_ciphers '%s'",
 			   openssl_ciphers);
@@ -5241,7 +5343,7 @@ int tls_connection_set_params(void *tls_ctx, struct tls_connection *conn,
 	}
 #endif /* OPENSSL_IS_BORINGSSL */
 #endif /* CONFIG_SUITEB */
-	if (ciphers && SSL_set_cipher_list(conn->ssl, ciphers) != 1) {
+	if (ciphers && SSL_set_cipher_list_and_ciphersuites(conn->ssl, ciphers) != 1) {
 		wpa_printf(MSG_INFO,
 			   "OpenSSL: Failed to set cipher string '%s'",
 			   ciphers);
@@ -5464,7 +5566,7 @@ int tls_global_set_params(void *tls_ctx,
 	}
 
 	if (params->openssl_ciphers &&
-	    SSL_CTX_set_cipher_list(ssl_ctx, params->openssl_ciphers) != 1) {
+	    SSL_CTX_set_cipher_list_and_ciphersuites(ssl_ctx, params->openssl_ciphers) != 1) {
 		wpa_printf(MSG_INFO,
 			   "OpenSSL: Failed to set cipher string '%s'",
 			   params->openssl_ciphers);
-- 
2.40.1

